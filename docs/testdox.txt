Feature\Auth
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET lots
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET single lot
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET lot entries
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login POST entry
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET entry
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET entry price
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login PATH entry
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET dashboard
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET issues
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login PATH issues
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET locale
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET lot
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login POST lots
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login GET users
 [x] Given an anonymous user when I visit the api paths then I get redirected to the login PATH users

Feature\Entry
 [x] Given a logged in user when I request GET /api/entries/:id then it gives me the entry with the expected structure
 [x] Given a logged in user when I request PATCH /api/entries/:id then it gives me the updated entry with the expected structure
 [x] Given a logged in user when I request GET /api/entries/:id/price then it gives me the price for the entry
 [x] Given a correct entry when I request to exit it should return 200
 [x] Given a late exit_at when I request to exit it should return 406

Feature\Issue
 [x] Give a non solved issue of type TYPE_NOT_PAYED when I resolve it then the connected entry results payed
 [x] Give a non solved issue of type TYPE_LATE when I resolve it then the connected entry results exited

Feature\ParkingLot
 [x] Given a logged in user when I request GET /api/lots then it gives me the lots with the expected structure
 [x] Given a logged in user when I request GET /api/lots/1 then it gives me the requested lot with the expected structure
 [x] Given a logged in user when I request GET /api/lots/1/entries then it gives me the requested lot's entries with the expected structure
 [x] Given a logged in user when I request GET /api/lots/1/entries then it gives me the requested lot's entries with the expected structure

Unit\Repositories\EntryRepository
 [x] Given a DB with 10 items when I ask for all the items then it give a collection of 10 Entry
 [x] Given a DB with 10 items when I ask for the item with id 1 then it gives me the correct item
 [x] When I ask ask for a non-existing item then it throws the correct exception
 [x] Given free space in the lot when I try to insert a new entry then it returns the new entry
 [x] Given no free space in the lot when I try to insert a new entry then it throws the correct exception
 [x] Given a valid price it should update the entry with the price and payed_at timestamp
 [x] Given a valid price and an entry with a price it should not update the entity
 [x] Given a valid exit time it should update the entry with the exited_at timestamp
 [x] Given a valid exit time and an entry without payed_tim it should not update the entry
 [x] Given a price to update when updateFields is called then the entry is updated
 [x] Given a non existing ID when updateFields is called then the correct exception is thrown

Unit\Repositories\IssueRepository
 [x] Given a parking lot in the db when createForLot is called an issue is added to the lot
 [x] Given an entry in the db when createForEntry is called an issue is added to the entry
 [x] Given 3 elements in the db when I call getAll then it gives me all the 3 issues
 [x] Given 5 elements in the db when I count them then it gives me only the open issues
 [x] Given an issue when update is called it sets the user and the solved state to 1

Unit\Repositories\ParkingLotRepository
 [x] Given a DB with 3 items when I ask for all the items then it give a collection of 3 ParkingLot
 [x] Given a DB with 3 items when I ask for the item with id 1 then it gives me the correct item
 [x] When I ask ask for a non-existing item then it throws the correct exception
 [x] Given a lot and new data array when update is called then the lot is updated

Unit\Repositories\UserRepository
 [x] Given 4 non-deleted users in the db when getAll is called then 4 users are returned
 [x] Give a non deleted user in the db when getById is called the user is returned
 [x] When getById is called for a non existing id then it should throw the correct exception
 [x] Given a user with USER role when I upgrade it then it has ADMIN role
 [x] Give a user with ADMIN role when I upgrade the it thorws the correct exception

Unit\Services\FreeSpotService
 [x] Given free spots it should return true
 [x] Given no free spots it should return false

Unit\Services\PriceCalculatorService
 [x] Given a starting date an a fare when I ask for the price then it returns the correct one 
 [x] Given a starting date an a fare when I ask for the price then it returns the correct one 
 [x] Given a starting date an a fare when I ask for the price then it returns the correct one 
 [x] Given a valid entry when I ask for the price then it returns the correct one
 [x] Given an entry with a price when I calculate then it throws the correct exception
 [x] Given an invalida arrival date when I calculate the price then it thows the correct exception null
 [x] Given an invalida arrival date when I calculate the price then it thows the correct exception future date
 [x] Given an invalida arrival date when I calculate the price then it thows the correct exception null
 [x] Given an invalida arrival date when I calculate the price then it thows the correct exception future date

Unit\Services\Validators\CanPayValidator
 [x] Given payed_at or exited_at not null it should thow and exception payed is not null
 [x] Given payed_at or exited_at not null it should thow and exception exited is not null
 [x] Given payed_at or exited_at not null it should thow and exception both are not null

Unit\Services\Validators\ExitedAtValidator
 [x] Given a date it should return if it's correct or wrong in the right way -2 minutes
 [x] Given a date it should return if it's correct or wrong in the right way now
 [x] Given a date it should return if it's correct or wrong in the right way +2 minutes

Unit\Services\Validators\PayedValidator
 [x] Given payed_at null it should return false payed is not null
 [x] Given payed_at null it should return false exited is not null
 [x] Given payed_at null it should return false both are not null

Unit\Services\Validators\PriceValidator
 [x] Given a price it should return if it's correct or wrong in the right way correct price 1
 [x] Given a price it should return if it's correct or wrong in the right way correct price 2
 [x] Given a price it should return if it's correct or wrong in the right way correct price 3
 [x] Given a price it should return if it's correct or wrong in the right way wrong price 1
 [x] Given a price it should return if it's correct or wrong in the right way wrong price 2
 [x] Given a price it should return if it's correct or wrong in the right way wrong price 3

Unit\Services\Validators\ValidatorFactory
 [x] Given a field it returns the correct class 
 [x] Given a field it returns the correct class 
 [x] Given a wrong field it throws the correct exception

